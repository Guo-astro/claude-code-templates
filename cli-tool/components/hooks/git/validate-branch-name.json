{
  "description": "Validate Git Flow branch naming conventions before checkout. Ensures branches follow the pattern: feature/*, release/v*.*.*, hotfix/*. Prevents creation of branches that don't follow Git Flow standards.",
  "hooks": {
    "PreToolUse": [
      {
        "matcher": "Bash(git checkout -b:*)",
        "hooks": [
          {
            "type": "command",
            "command": "BRANCH_NAME=$(echo \"$CLAUDE_TOOL_COMMAND\" | grep -oE 'git checkout -b ([^ ]+)' | awk '{print $NF}'); if [[ -n \"$BRANCH_NAME\" ]]; then if [[ ! \"$BRANCH_NAME\" =~ ^(feature|release|hotfix)/ ]]; then echo \"❌ Invalid branch name: $BRANCH_NAME\"; echo \"\"; echo \"Git Flow branches must follow these patterns:\"; echo \"  - feature/<descriptive-name>\"; echo \"  - release/v<MAJOR>.<MINOR>.<PATCH>\"; echo \"  - hotfix/<descriptive-name>\"; echo \"\"; echo \"Examples:\"; echo \"  ✅ feature/user-authentication\"; echo \"  ✅ release/v1.2.0\"; echo \"  ✅ hotfix/critical-security-fix\"; echo \"  ❌ my-new-feature (missing prefix)\"; echo \"  ❌ feat/something (wrong prefix)\"; echo \"\"; echo \"Special branches (main, develop) are created directly.\"; exit 1; fi; if [[ \"$BRANCH_NAME\" =~ ^release/ ]] && [[ ! \"$BRANCH_NAME\" =~ ^release/v[0-9]+\\.[0-9]+\\.[0-9]+(-.+)?$ ]]; then echo \"❌ Invalid release version: $BRANCH_NAME\"; echo \"\"; echo \"Release branches must follow semantic versioning:\"; echo \"  release/vMAJOR.MINOR.PATCH[-prerelease]\"; echo \"\"; echo \"Examples:\"; echo \"  ✅ release/v1.0.0\"; echo \"  ✅ release/v2.1.3\"; echo \"  ✅ release/v1.0.0-beta.1\"; echo \"  ❌ release/1.0.0 (missing 'v')\"; echo \"  ❌ release/v1.0 (incomplete version)\"; exit 1; fi; fi"
          }
        ]
      }
    ]
  }
}
